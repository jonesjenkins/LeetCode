// Given a binary tree, return the inorder traversal of its nodes' values.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        Stack<TreeNode> s = new Stack<>();
        TreeNode tmp = root;
        while (!s.isEmpty() || tmp != null) {
            while (tmp != null) {
                s.push(tmp);
                tmp = tmp.left;
            }
            tmp = s.pop();
            list.add(tmp.val);
            tmp = tmp.right;
        }
        return list;
    }
}

/*
Output:
    Your input:
        [2,3,null,1]
    Output:
        [1,3,2]
    Expected:
        [1,3,2]
*/
